# Automatically generated by pb2py
# fmt: off
import protobuf as p

from .EntityBody import EntityBody
from .SizePrefixedEntity import SizePrefixedEntity
from .VerifiableEntity import VerifiableEntity

if __debug__:
    try:
        from typing import Dict, List, Optional
        from typing_extensions import Literal  # noqa: F401
    except ImportError:
        Dict, List, Optional = None, None, None  # type: ignore


class NEMTransactionCommon(p.MessageType):

    def __init__(
        self,
        size_prefixed_entity: SizePrefixedEntity = None,
        verifiable_entity: VerifiableEntity = None,
        entity_body: EntityBody = None,
        fee: int = None,
        deadline: int = None,
    ) -> None:
        self.size_prefixed_entity = size_prefixed_entity
        self.verifiable_entity = verifiable_entity
        self.entity_body = entity_body
        self.fee = fee
        self.deadline = deadline

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('size_prefixed_entity', SizePrefixedEntity, 0),
            2: ('verifiable_entity', VerifiableEntity, 0),
            3: ('entity_body', EntityBody, 0),
            4: ('fee', p.UVarintType, 0),
            5: ('deadline', p.UVarintType, 0),
        }
