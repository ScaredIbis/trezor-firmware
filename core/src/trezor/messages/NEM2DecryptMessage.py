# Automatically generated by pb2py
# fmt: off
import protobuf as p

if __debug__:
    try:
        from typing import Dict, List, Optional
        from typing_extensions import Literal  # noqa: F401
    except ImportError:
        Dict, List, Optional = None, None, None  # type: ignore


class NEM2DecryptMessage(p.MessageType):
    MESSAGE_WIRE_TYPE = 811

    def __init__(
        self,
        address_n: List[int] = None,
        sender_public_key: str = None,
        payload: str = None,
    ) -> None:
        self.address_n = address_n if address_n is not None else []
        self.sender_public_key = sender_public_key
        self.payload = payload

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('address_n', p.UVarintType, p.FLAG_REPEATED),
            2: ('sender_public_key', p.UnicodeType, 0),
            3: ('payload', p.UnicodeType, 0),
        }
