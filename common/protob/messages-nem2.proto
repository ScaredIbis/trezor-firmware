syntax = "proto2";
package hw.trezor.messages.nem2;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageNem2";

// The messages defined here reflect the schemas defined in the catbuffer project
// https://github.com/nemtech/catbuffer/tree/master/schemas

/**
 * Request: Ask device for NEM2 public key corresponding to address_n path
 * @start
 * @next NEM2PublicKey
 * @next Failure
 */
message NEM2GetPublicKey {
    repeated uint32 address_n = 1;      // BIP-32 path to derive the key from master node
    optional bool show_display = 2;     // Optionally show on display before sending the result
}

/**
 * Response: Contains NEM2 address derived from device private seed
 * @endTimestamp
 */
message NEM2PublicKey {
    required bytes public_key = 1;    // NEM public key in Base32 encoding
}

/**
 * Request: Ask device to sign transaction
 * @start
 * @next NEM2SignedTx
 * @next Failure
 */
message NEM2SignTx {
    optional NEM2TransactionCommon transaction = 1;    // Common part of transaction
    optional NEM2TransactionCommon multisig = 2;       // Common part of inner transaction for multisig transactions
    optional NEM2TransferTransaction transfer = 3;          // Transfer transaction part
    optional string generation_hash = 4;
    repeated uint32 address_n = 5;
    optional bool cosigning = 6;
    optional NEM2MosaicDefinitionTransaction mosaic_definition = 7; // Mosaic Definition part
    optional NEM2MosaicSupplyChangeTransaction mosaic_supply = 8; // Mosaic Supply part
    optional NEM2NamespaceRegistrationTransaction namespace_registration = 9; // Namespace registration part
    optional NEM2AddressAliasTransaction address_alias = 10; // Address Alias
    optional NEM2AggregateTransaction aggregate = 11; // Aggregate part

    /**
    * Common types from
    * https://github.com/nemtech/catbuffer/blob/master/schemas/types.cats
    */

    message NEM2Mosaic {
        optional string id = 1;
        optional string amount = 2;
    }

    /**
    * Entities reflect definitions from
    * https://github.com/nemtech/catbuffer/blob/master/schemas/entity.cats
    */
    enum NEM2EntityType {
        RESERVED = 0;
        TRANSFER = 16724;
        MOSAIC_DEFINITION = 16717;
        MOSAIC_SUPPLY_CHANGE = 16973;
        NAMESPACE_REGISTRATION = 16718;
        ADDRESS_ALIAS = 16974;
        AGGREGATE_BONDED = 16961;
        AGGREGATE_COMPLETE = 16705;
    }

    enum NEM2NetworkType {
        MAIN_NET = 104;
        TEST_NET = 152;
        MIJIN = 96;
        MIJIN_TEST = 144;
    }

    enum NEM2NamespaceRegistrationType {
        ROOT = 0;
        CHILD = 1;
    }

    enum NEM2AliasAction {
        LINK = 1;
        UNLINK = 0;
    }

    // END entities


    /**
    * Base Transaction attributes
    * https://github.com/nemtech/catbuffer/blob/master/schemas/transaction.cats
    */
    message NEM2TransactionCommon {
        optional NEM2EntityType type = 1; // inline EntityBody
        optional NEM2NetworkType network_type = 2;
        optional uint32 version = 3 [default=1]; // inline EntityBody, defined as uint16 in catbuffer
        optional string max_fee = 4; // uint64
        optional string deadline = 5; // uint64
    }

    /**
    * Base Embedded Transaction attributes
    * https://github.com/nemtech/catbuffer/blob/master/schemas/transaction.cats
    */
    message NEM2EmbeddedTransactionCommon {
        optional NEM2EntityType type = 1; // inline EntityBody
        optional NEM2NetworkType network_type = 2;
        optional uint32 version = 3 [default=1]; // inline EntityBody, defined as uint16 in catbuffer
        optional string public_key = 4;
    }

    /**
    * Transfer Transaction type attributes
    * https://github.com/nemtech/catbuffer/blob/master/schemas/transaction.cats
    */
    message NEM2TransferTransaction {
        optional NEM2Address recipient_address = 1;
        optional NEM2TransferMessage message = 2;
        repeated NEM2Mosaic mosaics = 3;
    }

    message NEM2TransferMessage {
        optional string payload = 1;
        optional uint32 type = 2;
    }

    message NEM2Address {
        optional string address = 1;
        optional uint32 network_type = 2;
    }

    /**
    * Mosaic Definition transaction type definition
    */
    message NEM2MosaicDefinitionTransaction {
        optional uint32 nonce = 1; // mosaic nonce
        optional string mosaic_id = 2; // mosaic identifier
        optional uint32 flags = 3; // mosaic flags
        optional uint32 divisibility = 4; // mosaic divisibility
        optional uint64 duration = 5; // mosaic duration
    }

    /**
    * Mosaic Supply Change transaction definition
    */
    message NEM2MosaicSupplyChangeTransaction {
        optional string mosaic_id = 1; // mosaic identifier
        optional uint32 action = 2; // supply change direction (increase/descrease)
        optional uint64 delta = 3; // change in supply
    }

    /**
    * Namespace Registration transaction definition
    */
    message NEM2NamespaceRegistrationTransaction {
        optional string duration = 1; // namespace duration (uint64)
        optional string parent_id = 2; // parent namespace identifier (uint64)
        optional string id = 3; // identifier (uint64)
        optional NEM2NamespaceRegistrationType registration_type = 4 [default=ROOT];
        optional uint32 name_size = 5; // length of name (bytes) (uint8 in catbuffer)
        optional string namespace_name = 6; // namespace name
    }

    /**
    * Namespace Address Alias
    */
    message NEM2AddressAliasTransaction {
        optional string namespace_id = 1; // namespace identifier (uint64)
        optional NEM2Address address = 2; // address to link/unlink namespace to
        optional NEM2AliasAction alias_action = 3 [default=LINK];
    }

    /**
    * Aggregate transaction definition
    * There is no difference between an aggregate completed
    * and aggregate bonded transaction besides the "type"
    * which is defined as part of TransactionCommon
    */
    message NEM2AggregateTransaction {
        repeated NEM2InnerTransaction inner_transactions = 1;
        repeated NEM2Cosignature cosignatures = 2;
    }

    /**
    * Inner transaction type definition
    * Used as part of an Aggregate transaction
    */
    message NEM2InnerTransaction {
        optional NEM2EmbeddedTransactionCommon common = 1;
        optional NEM2TransferTransaction transfer = 2;
        optional NEM2MosaicDefinitionTransaction mosaic_definition = 3;
        optional NEM2MosaicSupplyChangeTransaction mosaic_supply = 4;
    }

    /**
    * Cosignature type definition
    * Used as part of an Aggregate transaction
    */
    message NEM2Cosignature {
        // TODO
    }
}

/**
 * Response: Contains NEM2 transaction data and signature
 * @end
 */
 message NEM2SignedTx {
    optional bytes payload = 1;     // signed transaction payload
    optional bytes hash = 2;        // transaction hash
    optional bytes signature = 3;        // transaction signature
}
