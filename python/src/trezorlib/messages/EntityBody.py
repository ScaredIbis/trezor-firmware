# Automatically generated by pb2py
# fmt: off
from .. import protobuf as p

if __debug__:
    try:
        from typing import Dict, List, Optional
        from typing_extensions import Literal  # noqa: F401
        EnumTypeNEMEntityType = Literal[0, 16724]
    except ImportError:
        Dict, List, Optional = None, None, None  # type: ignore
        EnumTypeNEMEntityType = None  # type: ignore


class EntityBody(p.MessageType):

    def __init__(
        self,
        signer_public_key: int = None,
        version: int = None,
        type: EnumTypeNEMEntityType = None,
    ) -> None:
        self.signer_public_key = signer_public_key
        self.version = version
        self.type = type

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('signer_public_key', p.UVarintType, 0),
            2: ('version', p.UVarintType, 0),
            3: ('type', p.EnumType("NEMEntityType", (0, 16724)), 0),
        }
